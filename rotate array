189. Rotate Array

Given an integer array nums, rotate the array to the right by k steps, where k is non-negative.

 

Example 1:

Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:

Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
0 <= k <= 105
 

Follow up:

Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.
Could you do it in-place with O(1) extra space?


sol:
class Solution {
    public void rotate(int[] arr, int k) {
        // // int n=nums.length;
        // // int arr[]=new int[n];
        // // int k=0;
        // // for(int i=a+1;i<n;i++)
        // // {
        // //     arr[k]=nums[i];
        // //     k++;

        // // }
        
        // //  for(int i=0;i<=a;i++)
        // // {
        // //     arr[k]=nums[i];
        // //     k++;

        // // }
        // // for(int i=0;i<n;i++)
        // // {
        // //     nums[i]=arr[i];
        // // }
        // int n=nums.length;

        // rev(nums,0,n-a-1);
        // rev(nums,a,n-1);
        // rev(nums,0,n-1);
    

    int n=arr.length;
    k=k%n;
    // Reverse first k elements
    Reverse(arr, 0, n-k - 1);
    // Reverse last n-k elements
    Reverse(arr, n-k , n - 1);
    // Reverse whole array
    Reverse(arr, 0, n - 1);




    }

     public static void Reverse(int[] arr, int start, int end) {
    while (start <= end) {
      int temp = arr[start];
      arr[start] = arr[end];
      arr[end] = temp;
      start++;
      end--;
    }
    }
}
